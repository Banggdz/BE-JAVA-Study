https://docs.spring.io/spring-data/jpa/reference/
- Reference Documentation:
https://docs.spring.io/spring-data/data-jpa/docs/1.4.x/reference/htmlsingle/#repositories.query-methods
- ORM:
ORM l√† 1 k·ªπ thu·∫≠t l·∫≠p tr√¨nh gi√∫p √°nh x·∫° c√°c record d·ªØ li·ªáu trong h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu sang d·∫°ng ƒë·ªëi t∆∞·ª£ng ƒëang ƒë·ªãnh nghƒ©a trong c√°c class
https://viblo.asia/p/object-relational-mapping-djeZ1PQ3KWz
https://www.tutorialspoint.com/jpa/jpa_architecture.htm
https://www.baeldung.com/jpql-hql-criteria-query
https://stackoverflow.com/questions/50322550/hibernate-dialect-for-mysql-8
             
C√°c h√†m c√≥ s·∫Øn JPA entityManager: https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html
üëâ K·∫øt lu·∫≠n: JPA cung c·∫•p ki·∫øn tr√∫c chu·∫©n v·ªõi c√°c class & interface ch√≠nh ƒë·ªÉ √°nh x·∫° ƒë·ªëi t∆∞·ª£ng Java sang b·∫£ng d·ªØ li·ªáu, qu·∫£n l√Ω transaction, v√† th·ª±c hi·ªán query m·ªôt c√°ch ƒë∆°n gi·∫£n, gi√∫p l·∫≠p tr√¨nh vi√™n t·∫≠p trung v√†o logic ·ª©ng d·ª•ng thay v√¨ vi·∫øt nhi·ªÅu code SQL.

L√†m vi·ªác v·ªõi JPA c√≥ 2 c√°ch ch√≠nh:
- JPQL (Java Persistence Query Language) : Ng√¥n ng·ªØ truy v·∫•n h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (Object-Oriented Query Language).
	+ S·ª≠ d·ª•ng ho√†n to√†n v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng Entity trong Java.
	+ Truy v·∫•n mang t√≠nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng, kh√¥ng ph·ª• thu·ªôc v√†o c·∫•u tr√∫c b·∫£ng csdl, Khi ch·∫°y, Hibernate/EclipseLink s·∫Ω d·ªãch JPQL th√†nh SQL g·ªëc ph√π h·ª£p v·ªõi DB b·∫°n d√πng..
	+ VD: String sql = "FROM BuildingEntity b";
	      Query query = entityManager.createQuery(sql,BuildingEntity.class);
		  return query.getResultList();
üëâ ·ªû ƒë√¢y:
	+ BuildingEntity l√† t√™n Entity class.
	+ b.name l√† thu·ªôc t√≠nh trong class BuildingEntity.
	+ Kh√¥ng quan t√¢m b·∫£ng th·∫≠t trong DB t√™n g√¨ (building, tbl_building, ...).

- Native Query
	+ Vi·∫øt truy v·∫•n SQL thu·∫ßn, g·∫ßn gi·ªëng nh∆∞ c√°ch l√†m vi·ªác tr·ª±c ti·∫øp v·ªõi c∆° s·ªü d·ªØ li·ªáu.
	+ D·ªÖ d√†ng t·∫≠n d·ª•ng c√°c t√≠nh nƒÉng ƒë·∫∑c th√π c·ªßa h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu.
	+ VD: String sql = "FROM BuildingEntity b WHERE b.name like '%building%";
		  Query query = entityManager.createNativeQuery(sql,BuildingEntity.class);
		  return query.getResultList();
üëâ ·ªû ƒë√¢y:
+ building l√† t√™n b·∫£ng trong DB.
+ name l√† t√™n c·ªôt th·∫≠t trong b·∫£ng.
+ C√¢u query ph·ª• thu·ªôc v√†o lo·∫°i DB (MySQL, Oracle, PostgreSQL‚Ä¶).

üü¢ JPA bao g·ªìm ba th√†nh ph·∫ßn ch√≠nh l√†: Entity, EntityManager, v√† EntityManagerFactory. Ngo√†i ra c√≤n c√≥, EntityTransaction, Persistence, Query.
- Entity
Entity l√† c√°c ƒë·ªëi t∆∞·ª£ng persistence th·ªÉ hi·ªán t∆∞∆°ng ·ª©ng 1 table trong c∆° s·ªü d·ªØ li·ªáu. Entity th∆∞·ªùng l√† c√°c class POJO ƒë∆°n gi·∫£n, ch·ªâ g·ªìm c√°c ph∆∞∆°ng th·ª©c getter, setter.
+ Entity c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu quan h·ªá.
+ Entity ƒë∆∞·ª£c x√°c ƒë·ªãnh th√¥ng qua m·ªôt ƒë·ªãnh danh (id), t∆∞∆°ng ƒë∆∞∆°ng v·ªõi kh√≥a ch√≠nh trong table c·ªßa c∆° s·ªü d·ªØ li·ªáu quan h·ªá.
+ Entity h·ªó tr·ª£ transaction.
+ Entity h·ªó tr·ª£ k·∫ø th·ª´a gi·ªëng nh∆∞ nh·ªØng class Java kh√°c.

- EntityManager
EntityManager l√† m·ªôt interface (qu·∫£n l√Ω c√°c thao t√°c persistence (l∆∞u tr·ªØ/duy tr√¨)) cung c·∫•p c√°c API cho vi·ªác t∆∞∆°ng t√°c v·ªõi c√°c Entity, qu·∫£n l√Ω c√°c ƒë·ªëi t∆∞·ª£ng Entity v√† t·ª´ ƒë√≥ c√≥ th·ªÉ s·ª≠ d·ª•ng Entity Manager ƒë·ªÉ th·ª±c hi·ªán c√°c ho·∫°t ƒë·ªông CRUD (Create, Read, Update, Delete) tr√™n csdl.
N√≥ ho·∫°t ƒë·ªông nh∆∞ m·ªôt factory ƒë·ªÉ t·∫°o ra c√°c ƒë·ªëi t∆∞·ª£ng Query.
M·ªôt s·ªë ch·ª©c nƒÉng c∆° b·∫£n c·ªßa EntityManager nh∆∞:
+ Persist: ph∆∞∆°ng th·ª©c n√†y d√πng ƒë·ªÉ l∆∞u m·ªôt th·ª±c th·ªÉ m·ªõi t·∫°o v√†o c∆° s·ªü d·ªØ li·ªáu.
+ Merge: d√πng ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa entity v√†o c∆° s·ªü d·ªØ li·ªáu.
+ Remove: x√≥a m·ªôt instance c·ªßa entity.
	VD:
	public void createEmployee(Employee employee) {
	    EntityManager entityManager = // l·∫•y Entity Manager t·ª´ EntityManagerFactory
	    
	    entityManager.persist(employee); // th√™m ƒë·ªëi t∆∞·ª£ng v√†o c∆° s·ªü d·ªØ li·ªáu
	}

- EntityManagerFactory
ƒê√¢y l√† l·ªõp factory c·ªßa EntityManager. N√≥ t·∫°o v√† qu·∫£n l√Ω nhi·ªÅu th·ªÉ hi·ªán (instance) c·ªßa EntityManager.            

- Persistence
M·ªôt Persistence ƒë·ªãnh nghƒ©a m·ªôt t·∫≠p h·ª£p c√°c Entity class ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi 1 instacne c·ªßa EntityManager trong ·ª©ng d·ª•ng.
Persistence (javax.persistence.Persistence) class bao g·ªìm c√°c ph∆∞∆°ng th·ª©c static ƒë·ªÉ l·∫•y instance c·ªßa EntityManagerFactory.

- EntityTransaction
C√≥ quan h·ªá m·ªôt-m·ªôt v·ªõi EntityManager.V·ªõi m·ªói EntityManager, c√°c thao t√°c giao d·ªãch (transaction) ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi l·ªõp EntityTransaction.    
M·ªôt Transaction l√† m·ªôt t·∫≠p h·ª£p c√°c thao t√°c trong ƒë√≥ t·∫•t c·∫£ c√°c thao t√°c ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng ho·∫∑c t·∫•t c·∫£ th·∫•t b·∫°i.
trong JPA, m·ªói ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong m·ªôt transaction.
M·ªôt database transaction bao g·ªìm m·ªôt t·∫≠p h·ª£p c√°c c√¢u l·ªánh SQL ƒë∆∞·ª£c committed ho·∫∑c rolled back trong m·ªôt unit.
EntityTransaction c√≥ quan h·ªá 1-1 v·ªõi EntityManager. B·∫•t k·ª≥ thao t√°c n√†o ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu th√¥ng qua ƒë·ªëi t∆∞·ª£ng EntityManager ƒë·ªÅu ƒë∆∞·ª£c ƒë·∫∑t trong m·ªôt Transaction. ƒê·ªëi t∆∞·ª£ng EntityManager gi√∫p t·∫°o EntityTransaction.

- Query
ƒê√¢y l√† m·ªôt interface, ƒë∆∞·ª£c m·ªói nh√† cung c·∫•p JPA implement ƒë·ªÉ c√≥ ƒë∆∞·ª£c c√°c ƒë·ªëi t∆∞·ª£ng quan h·ªá ƒë√°p ·ª©ng c√°c ti√™u ch√≠ (criteria) truy v·∫•n.

---- Persistent Context
https://www.baeldung.com/jpa-hibernate-persistence-context
- M·ªôt instance c·ªßa EntityManager ƒë∆∞·ª£c g·∫Øn v·ªõi m·ªôt persistence context. Persistence context l√† t·∫≠p h·ª£p c√°c entity, trong ƒë√≥ m·ªói ƒë·ªãnh danh entity ch·ªâ t·ªìn t·∫°i duy nh·∫•t m·ªôt instance. 
B√™n trong persistence context, c√°c entity v√† v√≤ng ƒë·ªùi c·ªßa ch√∫ng ƒë∆∞·ª£c qu·∫£n l√Ω. 
EntityManager API ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫°o, x√≥a entity, t√¨m ki·∫øm theo kh√≥a ch√≠nh, v√† th·ª±c hi·ªán query: persist(), merge(), remove(), find(), createQuery()
üëâPersistence context l√† b·ªô nh·ªõ ƒë·ªám c·∫•p m·ªôt (first-level cache), n∆°i t·∫•t c·∫£ c√°c entity ƒë∆∞·ª£c l·∫•y ra t·ª´ c∆° s·ªü d·ªØ li·ªáu ho·∫∑c ƒë∆∞·ª£c l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu. N√≥ n·∫±m ·ªü gi·ªØa ·ª©ng d·ª•ng c·ªßa ch√∫ng ta v√† t·∫ßng l∆∞u tr·ªØ d·ªØ li·ªáu
üëâPersistence context theo d√µi m·ªçi thay ƒë·ªïi ƒë∆∞·ª£c th·ª±c hi·ªán tr√™n managed entity (load, update hay persist trong persistence context).Khi transaction k·∫øt th√∫c (commit transaction), thay ƒë·ªïi n√†y s·∫Ω ƒë∆∞·ª£c flush (ghi ra) v√†o database
üëâPersistence Context ch√≠nh l√† n∆°i Hibernate/JPA gi·ªØ c√°c entity ƒëang ƒë∆∞·ª£c qu·∫£n l√Ω, ƒë·∫£m b·∫£o ch√∫ng ƒë·ªìng b·ªô v·ªõi database.
üëâEntityManager l√† interface cho ph√©p ch√∫ng ta t∆∞∆°ng t√°c v·ªõi persistence context. B·∫•t c·ª© khi n√†o ch√∫ng ta s·ª≠ d·ª•ng EntityManager, th·ª±c ch·∫•t ch√∫ng ta ƒëang l√†m vi·ªác v·ªõi persistence context.

üü¢ Flush l√† g√¨?
	Flush = qu√° tr√¨nh ƒë·ªìng b·ªô (synchronize) tr·∫°ng th√°i c·ªßa c√°c entity trong Persistence Context (b·ªô nh·ªõ t·∫°m/first-level cache) xu·ªëng c∆° s·ªü d·ªØ li·ªáu (DB).
	üëâƒë·∫©y c√°c thay ƒë·ªïi t·ª´ Persistence Context ‚Üí DB.

üü¢ persist l√† g√¨?
	persist() l√† ph∆∞∆°ng th·ª©c c·ªßa EntityManager d√πng ƒë·ªÉ l∆∞u m·ªôt entity m·ªõi v√†o persistence context (nghƒ©a l√† ƒë∆∞a entity v√†o tr·∫°ng th√°i Managed).
	Khi g·ªçi persist(), entity ch∆∞a ch·∫Øc ƒë√£ ƒë∆∞·ª£c ghi ngay xu·ªëng database, m√† n√≥ s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω trong Persistence Context tr∆∞·ªõc.
- C√≥ 2 lo·∫°i:
‚ù§Ô∏è Transaction-scoped persistence context:
	G·∫Øn li·ªÅn v·ªõi m·ªôt transaction (persistence context ƒë∆∞·ª£c t·∫°o khi transaction b·∫Øt ƒë·∫ßu v√† b·ªã h·ªßy khi transaction k·∫øt th√∫c (commit/rollback))
	Khi transaction k·∫øt th√∫c, c√°c entity trong persistence context ƒë∆∞·ª£c flush xu·ªëng DB.
	N·∫øu c√≥ persistence context ƒëang t·ªìn t·∫°i, n√≥ s·∫Ω ƒë∆∞·ª£c d√πng l·∫°i; n·∫øu kh√¥ng, EntityManager s·∫Ω t·∫°o m·ªõi.
	M·∫∑c ƒë·ªãnh lo·∫°i persistence context l√† PersistenceContextType.TRANSACTION. Vi·∫øt g·ªçn: @PersistenceContext:
‚ù§Ô∏è Extended-scoped persistence context:
	G·∫Øn v·ªõi v√≤ng ƒë·ªùi EntityManager/bean -> C√≥ th·ªÉ t·ªìn t·∫°i qua nhi·ªÅu transaction.
	C√≥ th·ªÉ persist entity m√† kh√¥ng c·∫ßn transaction, nh∆∞ng kh√¥ng th·ªÉ flush n·∫øu kh√¥ng c√≥ transaction.
‚ö†Ô∏è Trong Stateless Session Bean, extended persistence context c·ªßa m·ªói component l√† ƒë·ªôc l·∫≠p.
V√≠ d·ª•: persist ·ªü Component A kh√¥ng th·ªÉ th·∫•y trong Component B (ngay c·∫£ khi c√πng transaction).
VD:
@Component
public class TransctionPersistenceContextUserService {

    @PersistenceContext
    private EntityManager entityManager;
    
    @Transactional
    public User insertWithTransaction(User user) {
        entityManager.persist(user);
        return user;
    }
    
    public User find(long id) {
        return entityManager.find(User.class, id);
    }
}
- Many-To-One and One-To-Many Association Mappings
https://thorben-janssen.com/best-practices-many-one-one-many-associations-mappings/

--- JPA v√† JDBC
1. Object Mapping

- V·ªõi JDBC ta ph·∫£i map c√°c tr∆∞·ªùng trong b·∫£ng v·ªõi c√°c thu·ªôc t√≠nh c·ªßa Java object m·ªôt c√°ch "th·ªß c√¥ng".
VD: //rs l√† ResultSet tr·∫£ v·ªÅ t·ª´ c√¢u query get d·ªØ li·ªáu b·∫£ng user.
List<User> users=new ArrayList<User>();
while(rs.next()) {
     User user = new User();
     user.setUserId(rs.getString("UserId"));
     user.setName(rs.getString("FirstName"));
     user.setEmail(rs.getString(‚ÄúEmail‚Äù));
     users.add(user);
 }
-  V·ªõi Hibernate s·∫Ω h·ªó tr·ª£ ta map m·ªôt c√°ch "t·ª± ƒë·ªông" th√¥ng qua c√°c file c·∫•u h√¨nh map XML hay s·ª≠ d·ª•ng c√°c anotation:
@Entity
@Table(name = "user")
public class UserModel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private BigInteger id;
    @NotEmpty
    @Column(name = "email", unique = true)
    private String email;
    @NotEmpty
    @Column(name = "name")
    private String name;
    public BigInteger getId() {
        return this.id;
    }
    getter/setter
}
2. Database Independent
khi ta mu·ªën l·∫•y 10 b·∫£n ghi d·ªØ li·ªáu c·ªßa m·ªôt table t·ª´ 2 CSDL kh√°c nhau
- V·ªõi JDBC:
	#MySQL
	SELECT column_name FROM table_name ORDER BY column_name ASC LIMIT 10; 
	#SQL Server 
	SELECT TOP 10 column_name FROM table_name ORDER BY column_name ASC;
- V·ªõi JPA:
	Session.CreateQuery("SELECT E.id FROM Employee E ORDER BY E.id ASC").SetMaxResults(10).List();

--- JPA v√† Spring JPA
V√≠ d·ª• mu·ªën query l·∫•y t·∫•t c·∫£ User b·∫±ng Hibernate truy·ªÅn th·ªëng s·∫Ω nh∆∞ sau:
- JPA:
	// Gi·∫£ s·ª≠ ƒë√£ c√≥ ƒë·ªëi t∆∞·ª£ng session r·ªìi
	Session session = getSession();
	
	try {
	    // T·∫•t c·∫£ c√°c l·ªánh h√†nh ƒë·ªông v·ªõi DB th√¥ng qua Hibernate
	    // ƒë·ªÅu ph·∫£i n·∫±m trong 1 giao d·ªãch (Transaction)
	    // B·∫Øt ƒë·∫ßu giao d·ªãch
	    session.getTransaction().begin();	
	    // T·∫°o m·ªôt query
	    String sql = "Select u from " + User.class.getName() + " u
	    // T·∫°o ƒë·ªëi t∆∞·ª£ng Query.
	    Query<User> query = session.createQuery(sql);
	    // Th·ª±c hi·ªán truy v·∫•n v√† l·∫•y ra d·ªØ li·ªáu.
	    List<User> users = query.getResultList();
	    // In ra m√†n h√¨nh
	    for (User user : users) {
	        System.out.println(user);
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
- Spring JPA:
ƒê·ªÉ s·ª≠ d·ª•ng Spring JPA, c·∫ßn s·ª≠ d·ª•ng interface JpaRepository.

Y√™u c·∫ßu c·ªßa interface n√†y ƒë√≥ l√† b·∫°n ph·∫£i cung c·∫•p 2 th√¥ng tin:
	+ Entity (ƒê·ªëi t∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi Table trong DB)
	+ Ki·ªÉu d·ªØ li·ªáu c·ªßa kh√≥a ch√≠nh (primary key)

V√≠ d·ª•: T√¥i mu·ªën l·∫•y th√¥ng tin c·ªßa b·∫£ng User th√¨ l√†m nh∆∞ sau:

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
}
üëâ @Repository ƒë√°nh d·∫•u UserRepository l√† m·ªôt Bean v√† ch·ªãu tr√°ch nhi·ªám giao ti·∫øp v·ªõi DB.
Spring Boot s·∫Ω t·ª± t√¨m th·∫•y v√† kh·ªüi t·∫°o ra ƒë·ªëi t∆∞·ª£ng UserRepository trong Context. Vi·ªác t·∫°o ra UserRepository ho√†n to√†n t·ª± ƒë·ªông v√† t·ª± config, v√¨ ch√∫ng ta ƒë√£ k·∫ø th·ª´a JpaRepository.
B√¢y gi·ªù, vi·ªác l·∫•y ra to√†n b·ªô User s·∫Ω nh∆∞ sau:

@Autowired
UserRepository userRepository;
userRepository.findAll()
                .forEach(System.out::println);
