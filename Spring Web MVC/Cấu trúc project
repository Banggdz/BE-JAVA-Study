https://viblo.asia/p/cau-truc-du-an-spring-boot-the-nao-cho-chuan-ORNZqdwbK0n
🔹 1. Nếu bạn làm Spring Boot (web động, dùng Thymeleaf hoặc REST API)
- Web động chỉ bất kỳ website nào có thể sinh nội dung thay đổi theo dữ liệu (ví dụ: lấy dữ liệu từ CSDL, đăng nhập, thêm sửa xóa...).
- Mô hình MVC (Model – View – Controller)
Thành phần	    Vai trò	                  Công nghệ tương ứng
Model	        Dữ liệu (entity, object)	@Entity, @Repository, JPA
View	        Giao diện hiển thị	      Thymeleaf, HTML, CSS
Controller	  Xử lý request/response	  @Controller, @GetMapping, @PostMapping

🔁 Luồng hoạt động (Spring Boot MVC):
1.Người dùng truy cập URL / → Controller (@GetMapping("/")).
2.Controller gọi Service / Repository để lấy dữ liệu.
3.Trả lại view (index.html hoặc index.html trong templates/).
4.View (Thymeleaf) hiển thị dữ liệu ra trình duyệt.

Cấu trúc chuẩn đúng nhất là:
Quan_Ly_SV/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/example/quanlysv/
│   │   │       ├── controller/
│   │   │       ├── service/
│   │   │       ├── repository/
│   │   │       └── model/
│   │   ├── resources/
│   │   │   ├── application.properties
│   │   │   ├── static/        ← chứa file tĩnh: CSS, JS, hình ảnh
│   │   │   └── templates/     ← chứa file HTML (nếu dùng Thymeleaf)
│   └── test/
│       └── java/
├── pom.xml
└── target/

.

🔹 2. Nếu bạn làm Servlet/JSP (Java Web cổ điển)
🔹 Đặc điểm:
- cùng là web động
- Mô hình 3 layer
- Sử dụng Servlet (Java code) để xử lý request.
- Sử dụng JSP để tạo giao diện web (HTML + Java code trộn lẫn).
- Có file cấu hình web.xml.
- Deploy thủ công lên Tomcat / GlassFish.
- Dự án thường có thư mục src/main/webapp/.

🧠 Mô hình 3 layer gồm:
Tầng	                                                  Vai trò	                            
Presentation layer (UI)                	Giao diện hiển thị, nhập dữ liệu (JSP, HTML, CSS, JS)	  index.jsp, form.jsp
Business layer (Service / Controller)	  Xử lý logic nghiệp vụ, điều hướng luồng xử lý	          SinhVienServlet.java
Data Access layer (DAO)	                Giao tiếp với CSDL (SQL, JDBC)	                        SinhVienDAO.java

🔁 Luồng hoạt động:
1.Người dùng nhập form HTML (hoặc JSP).
2.Gửi request đến Servlet (@WebServlet("/them-sv")).
3.Servlet lấy dữ liệu form → tạo SinhVien → gọi DAO.
4.DAO thực thi INSERT / SELECT bằng JDBC.
5.Servlet chuyển kết quả lại cho JSP hiển thị.

Khi đó cấu trúc lại là:

Quan_Ly_SV/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/example/quanlysv/
│       │       ├── controller/
│       │       ├── model/
│       │       └── dao/
│       └── webapp/
│           ├── index.jsp
│           ├── WEB-INF/
│           │   └── web.xml
│           └── assets/
│               ├── css/
│               ├── js/
│               └── images/
├── pom.xml
└── target/

QuanLySinhVien/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/example/quanlysv/
│   │   │       └── AddSinhVienServlet.java   ← Servlet xử lý thêm SV
│   │   ├── resources/
│   │   └── webapp/
│   │       ├── index.html                    ← Form HTML
│   │       └── WEB-INF/web.xml               ← Cấu hình servlet
├── pom.xml                                   ← (nếu dùng Maven)

cách Java/Spring Boot xác định file HTML này gắn với parameter nào / object nào, tức là “form này gửi dữ liệu vào đâu và bind vào đối tượng nào”.

Ở Spring Boot + Thymeleaf (hoặc Spring Form Tag), có vài chỗ thể hiện rõ:

1️⃣ Trong Thymeleaf: th:object + th:field

Ví dụ form HTML:

<form th:object="${sinhVien}" th:action="@{/sinhvien/save}" method="post">
    <input th:field="*{maSV}" />
    <input th:field="*{hoTen}" />
    <button type="submit">Lưu</button>
</form>

Giải thích:
Thuộc tính	Vai trò
th:object="${sinhVien}"	Nói form này liên kết với object tên sinhVien trong Model.
th:field="*{maSV}"	Input này map tới thuộc tính maSV của sinhVien.
th:action="@{/sinhvien/save}"	Khi submit, dữ liệu sẽ gửi tới Controller method mapping /sinhvien/save.
2️⃣ Trong Controller: @ModelAttribute / @RequestParam

Ví dụ:

@PostMapping("/sinhvien/save")
public String save(@ModelAttribute("sinhVien") SinhVien sv) {
    // sv.maSV, sv.hoTen được tự động bind từ form
    System.out.println(sv.getMaSV());
    return "redirect:/sinhvien/list";
}

Giải thích:

@ModelAttribute("sinhVien") → trùng với th:object="${sinhVien}" trong HTML

Spring Boot sẽ tạo object SinhVien, và gán giá trị input theo tên thuộc tính (maSV, hoTen) vào các field tương ứng.

Đây là cách “file HTML biết thuộc param nào”: thông qua th:object + th:field ↔ @ModelAttribute.

3️⃣ Nếu dùng input đơn lẻ: @RequestParam
<form th:action="@{/sinhvien/save2}" method="post">
    <input type="text" name="maSV" />
    <input type="text" name="hoTen" />
    <button type="submit">Lưu</button>
</form>

@PostMapping("/sinhvien/save2")
public String save2(@RequestParam String maSV, @RequestParam String hoTen) {
    System.out.println(maSV + " - " + hoTen);
    return "redirect:/sinhvien/list";
}


Ở đây name của input chính là param gửi tới Controller.

Không cần th:object hay @ModelAttribute.

🔹 Kết luận

Nếu dùng th:object + th:field → HTML gắn với @ModelAttribute("...") trong Controller.

Nếu dùng name trong input → HTML gắn với @RequestParam trong Controller.
