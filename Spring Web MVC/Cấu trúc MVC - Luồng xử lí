
Tổng quan về Spring MVC
Spring MVC (Model–View–Controller) là một module trong Spring Framework hỗ trợ xây dựng các ứng dụng web theo mô hình phân lớp rõ ràng, giúp tách biệt phần xử lý nghiệp vụ, điều hướng và giao diện hiển thị.
Mô hình MVC chia ứng dụng thành ba thành phần chính:
•	Model: Chứa dữ liệu và logic nghiệp vụ.
•	View: Hiển thị dữ liệu cho người dùng (JSP, Thymeleaf, v.v.).
•	Controller: Nhận và xử lý request từ người dùng, tương tác với Model, chọn View để trả về.
________________________________________
🌀 1. Trung tâm của kiến trúc Spring MVC – DispatcherServlet
 
🔹 Vai trò:
DispatcherServlet là trái tim (Front Controller) của Spring MVC. Mọi request HTTP từ client đều đi qua nó đầu tiên, sau đó nó sẽ điều phối (dispatch) đến các thành phần thích hợp để xử lý.
🔹 Cơ chế hoạt động:
1.	Client gửi request HTTP đến ứng dụng.
2.	Request được DispatcherServlet tiếp nhận.
3.	HandlerMapping xác định Controller và method phù hợp để xử lý.
4.	Controller xử lý logic nghiệp vụ và trả về ModelAndView.
5.	ViewResolver chuyển tên logic của view thành đường dẫn vật lý tới file View (JSP/Thymeleaf...).
6.	View hiển thị dữ liệu và trả về HTML cho trình duyệt người dùng.
🔹 Cấu hình:
•	Trước đây, DispatcherServlet thường được khai báo trong web.xml.
•	Với Spring Boot hoặc Java-based configuration, quá trình này được tự động hóa, nhưng vẫn có thể tùy chỉnh thông qua lớp:
•	public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer { ... }
________________________________________
🧭 2. Các thành phần chính trong kiến trúc Spring MVC
🔸 2.1 DispatcherServlet (Front Controller)
•	Vai trò: Cổng vào duy nhất của ứng dụng.
•	Chức năng:
o	Nhận tất cả request HTTP.
o	Phân tích request.
o	Ủy quyền cho các thành phần phù hợp xử lý.
o	Trả kết quả response cho client.
________________________________________
🔸 2.2 HandlerMapping (Người chỉ đường)
•	Vai trò:
Sau khi nhận request, DispatcherServlet sẽ hỏi:
“Với URL /san-pham/123, Controller nào sẽ xử lý?”
•	Cách hoạt động:
HandlerMapping quét các Controller trong ứng dụng, tìm phương thức có mapping tương ứng.
•	Triển khai phổ biến:
RequestMappingHandlerMapping – tìm kiếm các phương thức có annotation như:
o	@RequestMapping
o	@GetMapping
o	@PostMapping
o	@PutMapping, @DeleteMapping, v.v.
________________________________________
🔸 2.3 Controller (Người xử lý)
•	Vai trò: Thực thi logic nghiệp vụ, xử lý dữ liệu, gọi service/repository để xử lý dữ liệu, rồi trả về Model + View để hiển thị.
•	Annotation:
o	@Controller – Dùng cho web app truyền thống (JSP, Thymeleaf).
o	@RestController – Kết hợp @Controller + @ResponseBody, chuyên cho RESTful API (trả JSON/XML trực tiếp).
Ví dụ:
@Controller
@RequestMapping("/product")
public class ProductController {

    @GetMapping("/{id}")
    public ModelAndView getProduct(@PathVariable int id) {
        ModelAndView mav = new ModelAndView("productDetail");
        mav.addObject("product", productService.getProductById(id));
        return mav;
    }
}
________________________________________
🔸 2.4 ModelAndView (Gói hàng)
•	Vai trò: Là "container" mà Controller trả về, chứa:
o	Model: Dữ liệu (Map các key–value).
o	View Name: Tên logic của view (ví dụ "productDetail").
Ví dụ:
ModelAndView mav = new ModelAndView("productDetail");
mav.addObject("product", product);
return mav;
________________________________________
🔸 2.5 ViewResolver (Người phiên dịch)
•	Vai trò: Dịch tên view logic thành file vật lý thực tế.
•	Ví dụ:
"productDetail" → /WEB-INF/views/productDetail.jsp
•	Triển khai phổ biến:
o	InternalResourceViewResolver (cho JSP)
o	ThymeleafViewResolver (cho Thymeleaf)
Cấu hình mẫu:
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/views/"/>
    <property name="suffix" value=".jsp"/>
</bean>
________________________________________
🔸 2.6 View (Người trình bày)
•	Vai trò: Nhận dữ liệu từ Model và render HTML gửi về client.
•	Công nghệ thường dùng:
o	JSP
o	Thymeleaf (được khuyến khích)
o	FreeMarker
o	Velocity
________________________________________
🧱 3. Các khái niệm và tính năng quan trọng của Spring MVC
⚙️ 3.1 Annotations – Ngôn ngữ giao tiếp với Framework
Annotations giúp giảm cấu hình XML rườm rà, làm cho code rõ ràng và dễ hiểu hơn.
📍 1. @Controller & @RestController
•	@Controller: Dùng cho ứng dụng có View.
•	@RestController: Tự động thêm @ResponseBody, chuyên cho REST API.
📍 2. @RequestMapping và các biến thể
•	@RequestMapping("/users"): Xử lý nhiều HTTP method.
•	@GetMapping("/users"): Chỉ xử lý GET.
•	@PostMapping("/users"): Chỉ xử lý POST.
•	Tương tự: @PutMapping, @DeleteMapping, @PatchMapping.
📍 3. Lấy dữ liệu từ Request
•	@RequestParam – lấy từ query (?id=123)
•	@PathVariable – lấy từ URI (/users/{id})
•	@RequestBody – ánh xạ JSON/XML → đối tượng Java
📍 4. Xử lý dữ liệu trả về
•	@ResponseBody – Trả dữ liệu trực tiếp vào body response (JSON/XML).
•	@RestController – bao gồm sẵn @ResponseBody.
📍 5. Làm việc với Model và Session
•	@ModelAttribute – Thêm/tái sử dụng đối tượng trong Model.
•	@SessionAttributes – Giữ model attribute trong session.
📍 6. Xác thực dữ liệu
•	@Valid / @Validated: Kích hoạt Bean Validation.
•	Các annotation phổ biến:
o	@NotNull
o	@Size(min=6, max=20)
o	@Email
o	@Pattern(regexp="...")
________________________________________
📤 4. Xử lý Form (Form Handling)
Spring MVC hỗ trợ Data Binding và Validation mạnh mẽ.
🔹 Data Binding
Tự động liên kết dữ liệu form HTML vào một đối tượng Java (command object).
Ví dụ:
@PostMapping("/login")
public String login(@ModelAttribute("user") UserForm form) {
    ...
}
🔹 Spring Form Tags (với JSP)
Cung cấp thư viện tag <form:form> để gắn dữ liệu model với input HTML dễ dàng.
🔹 Validation (Xác thực)
Spring tích hợp chuẩn Bean Validation (JSR 303/380) để đảm bảo dữ liệu hợp lệ.
________________________________________
⚠️ 5. Xử lý Ngoại lệ (Exception Handling)
📌 @ExceptionHandler
Xử lý ngoại lệ cục bộ trong Controller:
@ExceptionHandler(Exception.class)
public String handleError(Exception ex) {
    return "errorPage";
}
📌 @ControllerAdvice / @RestControllerAdvice
Xử lý ngoại lệ toàn cục, áp dụng cho toàn bộ ứng dụng.
________________________________________
🧩 6. Interceptors (Bộ chặn)
🔹 Vai trò:
Interceptor cho phép chạy logic trước, sau hoặc sau khi render View, rất hữu ích cho:
•	Ghi log request.
•	Kiểm tra xác thực, phân quyền.
•	Gắn dữ liệu chung cho mọi request.
🔹 Tạo Interceptor:
public class AuthInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest req, HttpServletResponse res, Object handler) {
        // kiểm tra đăng nhập
        return true;
    }
}
________________________________________
🌐 7. Hỗ trợ RESTful Web Services
Spring MVC hỗ trợ xây dựng API REST hiện đại thông qua:
•	@RestController
•	Mapping HTTP Methods tương ứng CRUD (POST, GET, PUT, DELETE)
•	Content Negotiation: Tự động chuyển đổi Java Object ↔ JSON/XML tùy theo Accept Header.
________________________________________
📂 8. Tải tệp lên (File Uploading)
🔹 Cấu hình:
Cần cấu hình MultipartResolver để xử lý request chứa file:
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
🔹 Trong Controller:
@PostMapping("/upload")
public String uploadFile(@RequestParam("file") MultipartFile file) {
    // xử lý file
    return "uploadSuccess";
}
________________________________________
🌍 9. Đa ngôn ngữ (Localization – i18n)
🔹 Spring cung cấp:
•	ResourceBundleMessageSource – quản lý file message đa ngôn ngữ.
•	LocaleResolver – xác định locale từ trình duyệt hoặc session.
🔹 Cấu hình:
<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="messages"/>
</bean>
Ví dụ file messages_en.properties và messages_vi.properties cho phép chuyển đổi ngôn ngữ động.
________________________________________
✅ Kết luận
Spring MVC là nền tảng web toàn diện, cung cấp:
•	Kiến trúc rõ ràng, tách biệt trách nhiệm.
•	Tích hợp mạnh mẽ với Spring Core, Validation, Security, AOP.
•	Hỗ trợ REST, i18n, file upload, form binding, interceptor, exception handling…
•	Tùy biến cao, dễ mở rộng, dễ kiểm thử.

