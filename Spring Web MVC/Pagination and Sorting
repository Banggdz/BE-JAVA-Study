https://www.baeldung.com/spring-data-jpa-pagination-sorting?utm_source=chatgpt.com
https://www.geeksforgeeks.org/advance-java/spring-mvc-building-pagination-and-sorting-in-web-applications/?utm_source=chatgpt.com
https://hazendaz.github.io/displaytag/tut_externalSortAndPage.html?utm_source=chatgpt.com

1. Server-side Pagination (Spring Boot + Thymeleaf)

üî∏Controller:

@GetMapping("/products")
public String viewPage(
        @RequestParam(defaultValue = "1") int pageNo,
        Model model) {
    int pageSize = 5;
    Page<Product> page = productService.findPaginated(pageNo, pageSize);
    model.addAttribute("products", page.getContent());
    model.addAttribute("currentPage", pageNo);
    model.addAttribute("totalPages", page.getTotalPages());
    return "products";
}


üî∏HTML (Thymeleaf):
<table>
  <tr th:each="p : ${products}">
    <td th:text="${p.name}"></td>
    <td th:text="${p.price}"></td>
  </tr>
</table>

<div>
  <a th:if="${currentPage > 1}" th:href="@{/products(pageNo=${currentPage-1})}">Prev</a>
  <span th:text="${currentPage}"></span> / <span th:text="${totalPages}"></span>
  <a th:if="${currentPage < totalPages}" th:href="@{/products(pageNo=${currentPage+1})}">Next</a>
</div>

‚úÖKhi b·∫°n b·∫•m Next ·ªü trang 1:
‚û°Ô∏è Tr√¨nh duy·ªát s·∫Ω g·ªçi URL: /products?pageNo=2&sortField=name&sortDir=asc
Controller nh·∫≠n request:     
    // pageNo l√∫c n√†y = 2 do ng∆∞·ªùi d√πng b·∫•m Next
    Page<Product> page = productService.findPaginated(pageNo, 5, sortField, sortDir); 
-> render l·∫°i viewu



C√°ch 2: DisplayTag library
üî∏@GetMapping(value="/admin/building-list")
public ModelAndView buildingList(
        @ModelAttribute BuildingSearchRequest buildingSearchRequest,
        HttpServletRequest request) {

    ModelAndView mav = new ModelAndView("admin/building/list");
    mav.addObject("modelSearch", buildingSearchRequest);

    // l·∫•y th√¥ng tin ph√¢n trang (page, maxPageItems) t·ª´ request
    DisplayTagUtils.of(request, buildingSearchRequest);

    // g·ªçi service ph√¢n trang
    List<BuildingSearchResponse> buildingSearchResponse =
            buildingService.findAll(buildingSearchRequest,
               PageRequest.of(buildingSearchRequest.getPage() - 1, 
                              buildingSearchRequest.getMaxPageItems()));

    // wrap v√†o result ƒë·ªÉ truy·ªÅn cho display:table
    BuildingSearchResponse result = new BuildingSearchResponse();
    result.setListResult(buildingSearchResponse);
    result.setTotalItems(buildingService.countTotalItem(buildingSearchResponse));

    mav.addObject("buildingList", result);

    return mav;
}

üî∏<display:table 
    name="buildingList.listResult"
    requestURI="${buildingListURL}"
    partialList="true"
    size="${buildingList.totalItems}"
    pagesize="${buildingList.maxPageItems}"
    ...
>

‚úÖDisplayTag s·∫Ω:

D·ª±a v√†o requestURI="${buildingListURL}" ƒë·ªÉ bi·∫øt URL g·ªëc c·∫ßn g·ªçi (v√≠ d·ª• /admin/building-list).
D·ª±a v√†o size v√† pagesize ƒë·ªÉ t√≠nh s·ªë trang c·∫ßn hi·ªÉn th·ªã.
N√≥ s·∫Ω t·ª± sinh ra thanh ph√¢n trang (paging bar) ·ªü d∆∞·ªõi b·∫£ng, v√≠ d·ª•:

<div class="pagelinks">
   <a href="/admin/building-list?page=1">1</a>
   <a href="/admin/building-list?page=2">2</a>
   <a href="/admin/building-list?page=3">3</a>
   ...
   <a href="/admin/building-list?page=next">Next</a>
</div>

Khi user b·∫•m n√∫t Next/Prev ·ªü b·∫£ng c·ªßa DisplayTag ‚Üí n√≥ g·ª≠i request m·ªõi k√®m ?page=2 (ho·∫∑c page=3 ‚Ä¶).
Controller nh·∫≠n request
DisplayTagUtils.of(request, buildingSearchRequest) s·∫Ω ƒë·ªçc param page v√† set v√†o buildingSearchRequest.setPage(page).
Sau ƒë√≥ b·∫°n d√πng buildingSearchRequest.getPage() ƒë·ªÉ query DB v·ªõi PageRequest.of(page-1, maxPageItems).
K·∫øt qu·∫£ m·ªõi ƒë∆∞·ª£c g√°n v√†o buildingList.listResult ‚Üí DisplayTag render l·∫°i.

Khi ng∆∞·ªùi d√πng b·∫•m Next ho·∫∑c s·ªë trang, DisplayTag kh√¥ng AJAX, m√† ch·ªâ ƒë∆°n gi·∫£n sinh link <a> v√† ƒë·ªÉ tr√¨nh duy·ªát g·ª≠i HTTP request GET m·ªõi t·ªõi controller, k√®m param ?page=N.

2. Client-side Pagination (JS render)
<table id="productTable"></table>
<div id="pagination"></div>

<script>
const pageSize = 5;
let currentPage = 1;
let products = [];

async function loadData() {
  const res = await fetch('/api/products/all'); // tr·∫£ v·ªÅ to√†n b·ªô data
  products = await res.json();
  renderPage(1);
}

function renderPage(page) {
  currentPage = page;
  const start = (page-1) * pageSize;
  const end = start + pageSize;
  const pageItems = products.slice(start, end);

  document.getElementById("productTable").innerHTML = pageItems.map(p => 
    `<tr><td>${p.name}</td><td>${p.price}</td></tr>`
  ).join("");

  let totalPages = Math.ceil(products.length/pageSize);
  document.getElementById("pagination").innerHTML = 
    `<button onclick="renderPage(${page-1})" ${page===1?"disabled":""}>Prev</button>
     Page ${page} / ${totalPages}
     <button onclick="renderPage(${page+1})" ${page===totalPages?"disabled":""}>Next</button>`;
}

loadData();
</script>
