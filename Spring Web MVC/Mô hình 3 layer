- L√† ki·∫øn tr√∫c ki·ªÉu client/server, trong ƒë√≥ giao di·ªán ng∆∞·ªùi d√πng (UI), logic nghi·ªáp v·ª• (BL/BR) v√† l∆∞u tr·ªØ d·ªØ li·ªáu ƒë∆∞·ª£c ph√°t tri·ªÉn nh∆∞ c√°c module ƒë·ªôc l·∫≠p tr√™n c√°c n·ªÅn t·∫£ng ri√™ng bi·ªát. M√¥ h√¨nh 3 t·∫ßng (3-tier) v·ª´a l√† ki·∫øn tr√∫c ph·∫ßn m·ªÅm, v·ª´a l√† m·∫´u thi·∫øt k·∫ø.
src/
 ‚îú‚îÄ‚îÄ gui/              ‚Üí Presentation Layer
 ‚îÇ    ‚îî‚îÄ‚îÄ StudentUI.java
 ‚îú‚îÄ‚îÄ bus/              ‚Üí Business Logic Layer (BLL)
 ‚îÇ    ‚îî‚îÄ‚îÄ StudentBUS.java
 ‚îú‚îÄ‚îÄ dao/              ‚Üí Data Access Layer (DAL)
 ‚îÇ    ‚îî‚îÄ‚îÄ StudentDAO.java
 ‚îî‚îÄ‚îÄ dto/              ‚Üí Data Transfer Object (Model)
      ‚îî‚îÄ‚îÄ Student.java
1Ô∏è‚É£ Presentation Layer (GUI ‚Äì Giao di·ªán ng∆∞·ªùi d√πng)
‚Ä¢	Nhi·ªám v·ª•: Giao ti·∫øp tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi d√πng, nh·∫≠p li·ªáu, hi·ªÉn th·ªã d·ªØ li·ªáu, ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i xu·ªëng Business Logic Layer (BLL).
‚Ä¢	Th√†nh ph·∫ßn ch√≠nh:
1.	UI Components: C√°c ph·∫ßn t·ª≠ giao di·ªán nh∆∞ textbox, button, combobox‚Ä¶ ch·ªãu tr√°ch nhi·ªám thu nh·∫≠n v√† hi·ªÉn th·ªã d·ªØ li·ªáu.
2.	UI Process Components: Qu·∫£n l√Ω lu·ªìng x·ª≠ l√Ω giao di·ªán, v√≠ d·ª•:
ÔÇß	Hi·ªÉn th·ªã m√†n h√¨nh tra c·ª©u ID kh√°ch h√†ng.
ÔÇß	Hi·ªÉn th·ªã chi ti·∫øt th√¥ng tin kh√°ch h√†ng.
ÔÇß	Hi·ªÉn th·ªã m√†n h√¨nh li√™n h·ªá kh√°ch h√†ng.
________________________________________
2Ô∏è‚É£ Business Logic Layer (BLL ‚Äì L·ªõp nghi·ªáp v·ª•)
‚Ä¢	Nhi·ªám v·ª•:
o	X·ª≠ l√Ω c√°c y√™u c·∫ßu t·ª´ GUI.
o	Ki·ªÉm tra t√≠nh h·ª£p l·ªá v√† r√†ng bu·ªôc d·ªØ li·ªáu.
o	Th·ª±c hi·ªán c√°c t√≠nh to√°n, quy t·∫Øc nghi·ªáp v·ª•.
o	Truy·ªÅn k·∫øt qu·∫£ v·ªÅ GUI ho·∫∑c xu·ªëng Data Access Layer.
‚Ä¢	Th√†nh ph·∫ßn ch√≠nh:
1.	Service Interface: Giao di·ªán m√† Presentation Layer s·ª≠ d·ª•ng ƒë·ªÉ g·ªçi c√°c d·ªãch v·ª• nghi·ªáp v·ª•.
2.	Business Workflows: ƒêi·ªÅu ph·ªëi c√°c quy tr√¨nh nghi·ªáp v·ª• theo th·ª© t·ª± ch√≠nh x√°c.
3.	Business Components: Ki·ªÉm tra r√†ng bu·ªôc, th·ª±c hi·ªán logic nghi·ªáp v·ª•, cung c·∫•p d·ªãch v·ª• cho Workflows v√† Service Interface.
4.	Business Entities (DTO): C√°c ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu d√πng ƒë·ªÉ truy·ªÅn d·ªØ li·ªáu gi·ªØa Presentation v√† Data Layer (v√≠ d·ª•: class Student v·ªõi t√™n, ng√†y sinh, ID, l·ªõp‚Ä¶).
________________________________________
3Ô∏è‚É£ Data Access Layer (DAL ‚Äì L·ªõp truy c·∫≠p d·ªØ li·ªáu)
‚Ä¢	Nhi·ªám v·ª•: Giao ti·∫øp v·ªõi c∆° s·ªü d·ªØ li·ªáu ho·∫∑c c√°c ngu·ªìn d·ªØ li·ªáu kh√°c (file, XML‚Ä¶), th·ª±c hi·ªán c√°c thao t√°c CRUD (t√¨m ki·∫øm, th√™m, x√≥a, s·ª≠a‚Ä¶).
‚Ä¢	Th√†nh ph·∫ßn ch√≠nh:
1.	Data Access Logic Components: X·ª≠ l√Ω l∆∞u tr·ªØ v√† truy xu·∫•t d·ªØ li·ªáu, d·ªÖ c·∫•u h√¨nh v√† b·∫£o tr√¨.
2.	Service Agents: H·ªó tr·ª£ g·ªçi v√† t∆∞∆°ng t√°c v·ªõi c√°c d·ªãch v·ª• b√™n ngo√†i.
________________________________________
üîπ V√≠ d·ª• minh h·ªça
Trong m·ªôt ·ª©ng d·ª•ng qu·∫£n l√Ω Uber:
L·ªõp	Th√†nh ph·∫ßn
GUI (Presentation)	Ph·∫ßn ch∆∞∆°ng tr√¨nh ch√≠nh, giao di·ªán ng∆∞·ªùi d√πng
BLL (Business)	BUS (Business Service/Workflows), x·ª≠ l√Ω nghi·ªáp v·ª•
DAL (Data)	DAO (Data Access), DTO (Data Transfer Object)
Lu·ªìng x·ª≠ l√Ω c∆° b·∫£n:
1.	Ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi GUI.
2.	GUI g·ª≠i y√™u c·∫ßu ƒë·∫øn BLL.
3.	BLL x·ª≠ l√Ω logic nghi·ªáp v·ª•, g·ªçi DAL n·∫øu c·∫ßn d·ªØ li·ªáu.
4.	DAL truy xu·∫•t d·ªØ li·ªáu, tr·∫£ v·ªÅ BLL.
5.	BLL tr·∫£ k·∫øt qu·∫£ v·ªÅ GUI ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
VD:
üß± 1Ô∏è‚É£ DTO (Model) ‚Äì Data Transfer Object
ƒê·∫°i di·ªán cho d·ªØ li·ªáu, ch·ªâ ch·ª©a thu·ªôc t√≠nh v√† getter/setter.
package dto;
public class Student {
    private int id;
    private String name;
    private double score;

    public Student(int id, String name, double score) {
        this.id = id;
        this.name = name;
        this.score = score;
    }
   Setter,Getter ‚Ä¶
    @Override
    public String toString() {
        return id + " - " + name + " - " + score;
    }
}
________________________________________
üß† 2Ô∏è‚É£ DAO (Data Access Layer)
Ch·ªãu tr√°ch nhi·ªám giao ti·∫øp v·ªõi c∆° s·ªü d·ªØ li·ªáu (·ªü ƒë√¢y v√≠ d·ª• gi·∫£ l·∫≠p b·∫±ng danh s√°ch).

public class StudentDAO {
    private Connection getConnection() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/schooldb";
        String user = "root";
        String pass = "123456";
        return DriverManager.getConnection(url, user, pass);
    }

    public List<Student> getAll() {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students";
        try (Connection con = getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(new Student(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getDouble("score")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public void addStudent(Student s) {
        String sql = "INSERT INTO students(name, score) VALUES (?, ?)";
        try (Connection con = getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, s.getName());
            ps.setDouble(2, s.getScore());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteStudent(int id) {
        String sql = "DELETE FROM students WHERE id=?";
        try (Connection con = getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Student findById(int id) {
        String sql = "SELECT * FROM students WHERE id=?";
        try (Connection con = getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getDouble("score")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}________________________________________
‚öôÔ∏è 3Ô∏è‚É£ BUS (Business Logic Layer)
X·ª≠ l√Ω logic nghi·ªáp v·ª•: ki·ªÉm tra h·ª£p l·ªá, g·ªçi DAO ƒë·ªÉ thao t√°c d·ªØ li·ªáu.
package bus;

import java.util.*;
import dao.StudentDAO;
import dto.Student;

public class StudentBUS {
    private StudentDAO studentDAO = new StudentDAO();

    public List<Student> getAllStudents() {
        return studentDAO.getAll();
    }

    public boolean addStudent(Student s) {
        if (s.getScore() < 0 || s.getScore() > 10) {
            System.out.println("ƒêi·ªÉm kh√¥ng h·ª£p l·ªá!");
            return false;
        }
        studentDAO.addStudent(s);
        return true;
    }

    public void removeStudent(int id) {
        studentDAO.deleteStudent(id);
    }
}
________________________________________
üñ•Ô∏è 4Ô∏è‚É£ GUI (Presentation Layer)
Giao ti·∫øp v·ªõi ng∆∞·ªùi d√πng, hi·ªÉn th·ªã k·∫øt qu·∫£.
package gui;

import bus.StudentBUS;
import dto.Student;
public class StudentUI {
    public static void main(String[] args) {
        StudentBUS bus = new StudentBUS();

        bus.addStudent(new Student(1, "An", 8.5));
        bus.addStudent(new Student(2, "B√¨nh", 9.0));
        bus.addStudent(new Student(3, "Chi", 7.8));

        System.out.println("Danh s√°ch sinh vi√™n:");
        for (Student s : bus.getAllStudents()) {
            System.out.println(s);
        }
    }
}

