BuildingAPI.java

@RequestMapping:
Có từ Spring 2.x → đến nay vẫn còn dùng được.
Nó là annotation gốc, cho phép định nghĩa nhiều method HTTP (GET, POST, PUT, DELETE…)

@RestController = @Controller + @ResponseBody

@Controller
public class BuildingAPI {

    @RequestMapping(value="/api/building/",method = RequestMethod.GET)
    public void getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        System.out.print(nameBuilding+" "+numberOfBasement);
    }

  Tìm kiếm trên param
//    @RequestMapping(value="/api/building/",method=RequestMethod.POST)
//    public void getBuilding2(@RequestParam Map<String,String>params) {
//    		System.out.print("ok");
//    }
Lấy object JSON từ client (body)
    @RequestMapping(value="/api/building/",method=RequestMethod.POST)
    public void getBuilding2(@RequestBody Map<String,String>params) {
    		System.out.print("ok");
    }
}
Dùng data transfer object

@RequestMapping(value="/api/building/",method=RequestMethod.POST)
    public BuildingDTO getBuilding2(@RequestBody BuildingDTO buildingDTO) {
    		return buildingDTO;
    }

@GetMapping(value="/api/building/")
@ResponseBody
public BuildingDTO getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        BuildingDTO result = new BuildingDTO();
        result.setName(nameBuilding);
        result.setNumberOfBasement(numberOfBasement);
        result.setWard(ward);
        return result;
    }
    
--
package com.javaweb.Beans;

public class BuildingDTO {
	private String name;
	private Integer numberOfBasement;
	private String ward;
	private String street;
	public String getName() {
		return name;
	}
	...
}

@GetMapping, @PostMapping, @PutMapping, @DeleteMapping:
Được giới thiệu từ Spring 4.3 (2016).
Là annotation rút gọn của @RequestMapping cho từng method HTTP.
Code gọn hơn, dễ đọc hơn. Ví dụ

@RestController
public class BuildingAPI {

    @GetMapping(value="/api/building/")

    public BuildingDTO getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        BuildingDTO result = new BuildingDTO();
        result.setName(nameBuilding);
        result.setNumberOfBasement(numberOfBasement);
        result.setWard(ward);
        return result;

List<BuildingDTO> listBuildings = new ArrayList<>();
        BuildingDTO buildingDTO1 = new BuildingDTO();
        buildingDTO1.setName("ABC Building");
        buildingDTO1.setNumberOfBasement(3);
        buildingDTO1.setWard("Tan Mai");
        BuildingDTO buildingDTO2 = new BuildingDTO();
        buildingDTO2.setName("ACM Tower");
        buildingDTO2.setNumberOfBasement(2);
        buildingDTO2.setWard("Da Cao");
        listBuildings.add(buildingDTO1);
        listBuildings.add(buildingDTO2);
        return listBuildings;
    }
    
    @PostMapping(value="/api/building/")
    public BuildingDTO getBuilding2(@RequestBody BuildingDTO buildingDTO) {
    		return buildingDTO;
    }
    @DeleteMapping(value="/api/building/{id}/{name}")
    public void deleteBuilding(@PathVariable Integer id,
    		@PathVariable String name,
    		@RequestParam(value="ward",required=false) String ward
    		) {
    		System.out.print("Đã xóa tòa nhà có id: "+id+" ten: "+name);   
    }
   
}
