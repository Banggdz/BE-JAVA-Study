BuildingAPI.java

1️⃣ @RequestMapping:
Có từ Spring 2.x → đến nay vẫn còn dùng được.
Nó là annotation gốc, cho phép định nghĩa nhiều method HTTP (GET, POST, PUT, DELETE…)

2️⃣ @GetMapping, @PostMapping, @PutMapping, @DeleteMapping:
Được giới thiệu từ Spring 4.3 (2016).
Là annotation rút gọn của @RequestMapping cho từng method HTTP.
Code gọn hơn, dễ đọc hơn.
👉 @RequestBody: thường được dùng để liên kết một đối tượng với một tham số trong HTTP request. 
    @RequestBody thường đường dùng cùng với các RESTful API như POST, PUT.
👉 @RequestParam: trích xuất thông tin từ URL.
👉 @ResponseBody: được dùng để liên kết dữ liệu trả về với một đối tượng, Spring Boot sẽ serialize đối tượng này để trả về một đối tượng JSON hoặc XML.

3️⃣ @Controller

Là annotation được dùng để đánh dấu một class là Controller trong mô hình MVC.
Nó thường được sử dụng với Spring MVC để trả về View (HTML, JSP, Thymeleaf, …) thay vì dữ liệu JSON/XML.
Khi return một giá trị từ method, Spring sẽ hiểu đó là tên View, và sẽ đi tìm template tương ứng để render.

👉 Ví dụ:

@Controller
public class HomeController {
    
    @GetMapping("/home")
    public String homePage(Model model) {
        model.addAttribute("message", "Xin chào Spring MVC!");
        return "home"; // Trả về file home.html (hoặc home.jsp)
    }
}
Ở đây "home" là view name, không phải dữ liệu JSON.

4️⃣ @RestController
@RestController = @Controller + @ResponseBody

👉 Dữ liệu return từ method có dạng  JSON/XML, không đi qua View Resolver.
Thường dùng để xây dựng RESTful API (Web Service).

5️⃣ VD:
@Controller
public class BuildingAPI {

    @RequestMapping(value="/api/building/",method = RequestMethod.GET)
    public void getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        System.out.print(nameBuilding+" "+numberOfBasement);
    }

  Tìm kiếm trên param
//    @RequestMapping(value="/api/building/",method=RequestMethod.POST)
//    public void getBuilding2(@RequestParam Map<String,String>params) {
//    		System.out.print("ok");
//    }
Lấy object JSON từ client (body)
    @RequestMapping(value="/api/building/",method=RequestMethod.POST)
    public void getBuilding2(@RequestBody Map<String,String>params) {
    		System.out.print("ok");
    }
}
Dùng data transfer object

@RequestMapping(value="/api/building/",method=RequestMethod.POST)
    public BuildingDTO getBuilding2(@RequestBody BuildingDTO buildingDTO) {
    		return buildingDTO;
    }

@GetMapping(value="/api/building/")
@ResponseBody
public BuildingDTO getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        BuildingDTO result = new BuildingDTO();
        result.setName(nameBuilding);
        result.setNumberOfBasement(numberOfBasement);
        result.setWard(ward);
        return result;
    }
    
--
package com.javaweb.Beans;

public class BuildingDTO {
	private String name;
	private Integer numberOfBasement;
	private String ward;
	private String street;
	public String getName() {
		return name;
	}
	...
}

------------

@RestController
public class BuildingAPI {

    @GetMapping(value="/api/building/")

    public BuildingDTO getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
        BuildingDTO result = new BuildingDTO();
        result.setName(nameBuilding);
        result.setNumberOfBasement(numberOfBasement);
        result.setWard(ward);
        return result;

List<BuildingDTO> listBuildings = new ArrayList<>();
        BuildingDTO buildingDTO1 = new BuildingDTO();
        buildingDTO1.setName("ABC Building");
        buildingDTO1.setNumberOfBasement(3);
        buildingDTO1.setWard("Tan Mai");
        BuildingDTO buildingDTO2 = new BuildingDTO();
        buildingDTO2.setName("ACM Tower");
        buildingDTO2.setNumberOfBasement(2);
        buildingDTO2.setWard("Da Cao");
        listBuildings.add(buildingDTO1);
        listBuildings.add(buildingDTO2);
        return listBuildings;
    }
    
    @PostMapping(value="/api/building/")
    public BuildingDTO getBuilding2(@RequestBody BuildingDTO buildingDTO) {
    		return buildingDTO;
    }
    @DeleteMapping(value="/api/building/{id}/{name}")
    public void deleteBuilding(@PathVariable Integer id,
    		@PathVariable String name,
    		@RequestParam(value="ward",required=false) String ward
    		) {
    		System.out.print("Đã xóa tòa nhà có id: "+id+" ten: "+name);   
    }
   
}
