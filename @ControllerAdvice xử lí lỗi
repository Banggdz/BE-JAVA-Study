X·ª≠ l√≠ ƒë∆∞·ª£c 5,6 trong rules (b√°o 200ok d√π g·∫∑p l·ªói ph·∫£i nh·∫£y v√†o catch)
üü¢ 2xx ‚Äì Th√†nh c√¥ng
200 OK ‚Üí th√†nh c√¥ng, c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
return ResponseEntity.ok(user);
201 CREATED ‚Üí t·∫°o m·ªõi resource th√†nh c√¥ng
return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
204 NO_CONTENT ‚Üí th√†nh c√¥ng, kh√¥ng c√≥ body (th∆∞·ªùng d√πng cho DELETE)
return ResponseEntity.noContent().build();

üî¥ 4xx ‚Äì L·ªói ph√≠a Client
400 BAD_REQUEST ‚Üí request sai, d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (validate fail, thi·∫øu field‚Ä¶)
401 UNAUTHORIZED ‚Üí ch∆∞a ƒëƒÉng nh·∫≠p / token sai
403 FORBIDDEN ‚Üí c√≥ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng ƒë·ªß quy·ªÅn
404 NOT_FOUND ‚Üí kh√¥ng t√¨m th·∫•y resource (sai ID, sai URL)
405 METHOD_NOT_ALLOWED ‚Üí method kh√¥ng h·ªó tr·ª£ (g·ª≠i POST v√†o API ch·ªâ cho GET)
409 CONFLICT ‚Üí xung ƒë·ªôt d·ªØ li·ªáu (v√≠ d·ª•: ƒëƒÉng k√Ω username ƒë√£ t·ªìn t·∫°i)
415 UNSUPPORTED_MEDIA_TYPE ‚Üí Content-Type kh√¥ng ƒë√∫ng (v√≠ d·ª• client g·ª≠i text/plain thay v√¨ application/json)
422 UNPROCESSABLE_ENTITY ‚Üí d·ªØ li·ªáu ƒë√∫ng format nh∆∞ng vi ph·∫°m rule nghi·ªáp v·ª•

üü† 5xx ‚Äì L·ªói ph√≠a Server
500 INTERNAL_SERVER_ERROR ‚Üí l·ªói chung trong server (NullPointerException, bug code‚Ä¶)
503 SERVICE_UNAVAILABLE ‚Üí d·ªãch v·ª• t·∫°m ng·ª´ng, qu√° t·∫£i, ho·∫∑c b·∫£o tr√¨
@ControllerAdvice:
L√† m·ªôt annotation c·ªßa Spring d√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a m·ªôt l·ªõp to√†n c·ª•c ch·ª©a c√°c logic x·ª≠ l√Ω chung cho nhi·ªÅu @Controller.
N√≥ khai b√°o c√°c ph∆∞∆°ng th·ª©c @ExceptionHandler, @InitBinder, ho·∫∑c @ModelAttributeƒë∆∞·ª£c chia s·∫ª tr√™n nhi·ªÅu @Controller class.
HttpHeaders headers = new HttpHeaders();
headers.add("Custom-Header", "MyValue");

Trong @ControllerAdvice, b·∫°n c√≥ th·ªÉ d√πng:
@ExceptionHandler
B·∫Øt v√† x·ª≠ l√Ω c√°c exception x·∫£y ra trong controller.

1. Tr·∫£ v·ªÅ ch·ªâ body
return ResponseEntity.ok("Hello World");
body = "Hello World"
status = 200 OK
headers = r·ªóng

2.Tr·∫£ v·ªÅ body + headers + status
return new ResponseEntity<>("Data here", headers, HttpStatus.CREATED);

body = "Data here"
headers = { Custom-Header: MyValue }
status = 201 CREATED

3. Tr·∫£ v·ªÅ body + status
return new ResponseEntity<>("Invalid input", HttpStatus.BAD_REQUEST);

body = "Invalid input"
status = 400 BAD_REQUEST
headers = r·ªóng

----
package com.javaweb.controllerAdvice;
import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.javaweb.Beans.ErrorResponseDTO;
import com.javaweb.customerexception.FieldRequiredException;
@ControllerAdvice
public class ControllerAdvisor extends ResponseEntityExceptionHandler {
	@ExceptionHandler(ArithmeticException.class)

    public ResponseEntity<Object> handleArithmeticException(
    	ArithmeticException ex,WebRequest request){
		ErrorResponseDTO errorResponseDTO = new ErrorResponseDTO();
		errorResponseDTO.setError(ex.getMessage());
		List<String> details = new ArrayList<>();
		details.add("S·ªë ko chia ƒë∆∞·ª£c cho 0");
		errorResponseDTO.setDetail(details);
        return new ResponseEntity<>(errorResponseDTO, HttpStatus.INTERNAL_SERVER_ERROR);
    }
	@ExceptionHandler(FieldRequiredException.class)
	public ResponseEntity<Object> handleFieldRequiredException(
			FieldRequiredException ex, WebRequest request){
			ErrorResponseDTO errorResponseDTO = new ErrorResponseDTO();
			errorResponseDTO.setError(ex.getMessage());
			List<String>details=new ArrayList<>();
			details.add("name or numberOfBasement is null");
			details.add("Vui long nhap lai");
			errorResponseDTO.setDetail(details);
			return new ResponseEntity<>(errorResponseDTO,HttpStatus.BAD_GATEWAY);
	}
}
----
@RestController
public class BuildingAPI {

    @PostMapping(value="/api/building/")

    public Object getBuilding(@RequestBody BuildingDTO building) {

    valiDate(building);
	return null;

    }
vi·∫øt h√†m n√©m l·ªói t·ª± custom
public void valiDate(BuildingDTO buildingDTO)throws FieldRequiredException {
	if(buildingDTO.getName()==null||buildingDTO.getName().equals("")||buildingDTO.getNumberOfBasement()==null) {
		throw new FieldRequiredException("name or numberOfBasement is null");
	}
}
