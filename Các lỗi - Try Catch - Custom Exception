https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status
https://200lab.io/blog/exception-la-gi-cach-xu-ly-exception-java
https://www.tpointtech.com/custom-exception-in-java

Trong Spring MVC:

@GetMapping("/api/building/")
public List<BuildingDTO> getBuildings(
    @RequestParam(required = false) String name
) { ... }
Spring tự hiểu name là tên của query parameter.
Nếu bạn chỉ truyền 1 biến và tên biến trùng với tên query parameter, bạn có thể bỏ value=.
@RequestParam(value = "name", required = false) String name

@RestController
public class BuildingAPI {

    @GetMapping(value="/api/building/")
    public Object getBuilding(@RequestParam(value="name",required=false) String nameBuilding,
    						   @RequestParam(value="numberOfBasement",required=false) Integer numberOfBasement,
    						   @RequestParam(value="ward",required=false) String ward
    		) {
    	try {
    		System.out.print(5/0);    	
    	}
    	catch(Exception e) {
    		ErrorResponseDTO errorResponseDTO = new ErrorResponseDTO();
    		errorResponseDTO.setError(e.getMessage());
    		List<String>details=new ArrayList<>();
    		details.add("Không chia được cho 0");
    		errorResponseDTO.setDetail(details);
    		return errorResponseDTO;
//    		System.out.print(e.getMessage());
    	}
        List<BuildingDTO> listBuildings = new ArrayList<>();
        BuildingDTO buildingDTO1 = new BuildingDTO();
        buildingDTO1.setName("ABC Building");
        buildingDTO1.setNumberOfBasement(3);
        buildingDTO1.setWard("Tan Mai");
        BuildingDTO buildingDTO2 = new BuildingDTO();
        buildingDTO2.setName("ACM Tower");
        buildingDTO2.setNumberOfBasement(2);
        buildingDTO2.setWard("Da Cao");
        listBuildings.add(buildingDTO1);
        listBuildings.add(buildingDTO2);
        return listBuildings;
    }
    
    @PostMapping(value="/api/building/")
    public BuildingDTO getBuilding2(@RequestBody BuildingDTO buildingDTO) {
    		return buildingDTO;
    }
vd Body trong postman raw-JSON (viết ra body rồi post):
{
    "numberOfElement":4,
    "ward":"Tan Mai",
    "street":"Le Van Viet"
}
    @DeleteMapping(value="/api/building/{id}/{name}")
    public void deleteBuilding(@PathVariable Integer id,
    		@PathVariable String name,
    		@RequestParam(value="ward",required=false) String ward
    		) {
    		System.out.print("Đã xóa tòa nhà có id: "+id+" ten: "+name);   
    }
   
}
vẫn báo request successfull 200 ok dù lỗi -> Dùng try catch hoặc @ControllerAdvice để báo lỗi trong return
return{
    "error": "/ by zero",
    "detail": [
        "Không chia được cho 0"
    ]
}
----- Customer exception -----
Khi bạn dùng annotation @RequestBody, Spring sẽ tự động dùng HttpMessageConverter, mặc định là MappingJackson2HttpMessageConverter 
để chuyển JSON thành object Java.
Jackson sẽ:
Đọc key "name" → tìm setter setName(String) → gọi với value "Tòa nhà A".
Đọc key "numberOfBasement" → tìm setter setNumberOfBasement(Integer) → gọi với value 3.
Quy tắc: key JSON trùng tên với field hoặc getter/setter trong class → tự động map.

@PostMapping(value="/api/building/")
    public Object getBuilding(@RequestBody BuildingDTO building) {
    	try {
    		valiDate(building);
    	}
    	catch(Exception e) {
    		ErrorResponseDTO errorResponseDTO = new ErrorResponseDTO();
    		errorResponseDTO.setError(e.getMessage());
    		List<String>details=new ArrayList<>();
    		details.add("Check again name or numberOfBasement becauseof NULL");
    		errorResponseDTO.setDetail(details);
    		return errorResponseDTO;
    	}
	return null;

    }
ném ra exception tự custom
public void valiDate(BuildingDTO buildingDTO)throws FieldRequiredException {
	if(buildingDTO.getName()==null||buildingDTO.getName().equals("")||buildingDTO.getNumberOfBasement()==null) {
		throw new FieldRequiredException("name or numberOfBasement is null");
	}
}

-- FieldRequiredException.java
package com.javaweb.customerexception;

public class FieldRequiredException extends Exception{
	public FieldRequiredException(String s) {
		super(s);
		// TODO Auto-generated constructor stub
	}

	public FieldRequiredException(String message, Throwable cause, boolean enableSuppression,
			boolean writableStackTrace) {
		super(message, cause, enableSuppression, writableStackTrace);
		// TODO Auto-generated constructor stub
	}

	public FieldRequiredException(String message, Throwable cause) {
		super(message, cause);
		// TODO Auto-generated constructor stub
	}

	public FieldRequiredException(Throwable cause) {
		super(cause);
		// TODO Auto-generated constructor stub
	}
}
package com.javaweb.model;
--- BuildingDTO
public class BuildingDTO {
	private String name;
	private Integer numberOfBasement;
	private String address;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getNumberOfBasement() {
		return numberOfBasement;
	}
	public void setNumberOfBasement(Integer numberOfBasement) {
		this.numberOfBasement = numberOfBasement;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}

}
-- ErrorResponseDTO.java
package com.javaweb.Beans;

public class ErrorResponseDTO {
	private String error;
	private List<String>detail=new ArrayList<String>();
	public String getError() {
		return error;
	}
	public void setError(String error) {
		this.error = error;
	}
	public List<String> getDetail() {
		return detail;
	}
	public void setDetail(List<String> detail) {
		this.detail = detail;
	}
	
}


