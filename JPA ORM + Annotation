ORM l√† 1 k·ªπ thu·∫≠t l·∫≠p tr√¨nh gi√∫p √°nh x·∫° c√°c record d·ªØ li·ªáu trong h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu sang d·∫°ng ƒë·ªëi t∆∞·ª£ng ƒëang ƒë·ªãnh nghƒ©a trong c√°c class 
- Ki·∫øn tr√∫c ORM:
Gi·∫£i th√≠ch c√°ch d·ªØ li·ªáu ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu quan h·ªá qua 3 giai ƒëo·∫°n.

Phase 1: T·∫ßng Object/·ª®ng d·ª•ng (Object data phase)
  Ch·ª©a c√°c l·ªõp POJO, interface d·ªãch v·ª• v√† l·ªõp d·ªãch v·ª•. ƒê√¢y l√† t·∫ßng th√†nh ph·∫ßn nghi·ªáp v·ª• ch√≠nh, c√≥ logic nghi·ªáp v·ª• v√† thu·ªôc t√≠nh.
  
  - POJO (Plain Old Java Object): L√† l·ªõp Java ƒë∆°n gi·∫£n, ch·ªâ ch·ª©a thu·ªôc t√≠nh (fields) v√† getter/setter
  - Interface d·ªãch v·ª• (Service Interface): L√† h·ª£p ƒë·ªìng (contract) ho·∫∑c b·∫£n m√¥ t·∫£ c√°c ch·ª©c nƒÉng m√† m·ªôt d·ªãch v·ª• cung c·∫•p.
    VD:
    public interface EmployeeService {
        void createEmployee(Employee emp);
        Employee findEmployeeById(int id);
        void deleteEmployee(int id);
    }
  - L·ªõp d·ªãch v·ª• (Service Class / Implementation Class): L√† class hi·ªán th·ª±c (implements) interface d·ªãch v·ª•.
    V√≠ d·ª•:
    public class EmployeeServiceImpl implements EmployeeService {
        private EntityManager entityManager;
        public EmployeeServiceImpl(EntityManager em) {
            this.entityManager = em;
        }
        @Override
        public void createEmployee(Employee emp) {
            entityManager.persist(emp);
        }
        @Override
        public Employee findEmployeeById(int id) {
            return entityManager.find(Employee.class, id);
        }
    
        @Override
        public void deleteEmployee(int id) {
            Employee emp = entityManager.find(Employee.class, id);
            if(emp != null) {
                entityManager.remove(emp);
            }
        }
    }
  V√≠ d·ª•: gi·∫£ s·ª≠ ta c√≥ c∆° s·ªü d·ªØ li·ªáu nh√¢n vi√™n (Employee).
  Employee POJO class ch·ª©a c√°c thu·ªôc t√≠nh: ID, name, salary, designation c√πng c√°c ph∆∞∆°ng th·ª©c getter/setter.
  Employee DAO/Service classes ch·ª©a c√°c ph∆∞∆°ng th·ª©c d·ªãch v·ª•: create employee, find employee, delete employee.

Phase 2: Mapping / Persistence Phase (T·∫ßng JPA/ORM)
  Ch·ª©a: JPA provider, mapping file (ORM.xml), JPA Loader, v√† Object Grid.
  JPA Provider: S·∫£n ph·∫©m c·ªßa nh√† cung c·∫•p JPA (javax.persistence). V√≠ d·ª•: EclipseLink, TopLink, Hibernate.
    üëâ ch·ªãu tr√°ch nhi·ªám d·ªãch c√°c thao t√°c v·ªõi entity th√†nh c√¢u SQL c·ª• th·ªÉ cho DB
  Mapping file (ORM.xml): Ch·ª©a c·∫•u h√¨nh √°nh x·∫° gi·ªØa d·ªØ li·ªáu trong l·ªõp POJO v√† d·ªØ li·ªáu trong CSDL quan h·ªá.
  JPA Loader: Ho·∫°t ƒë·ªông nh∆∞ b·ªô nh·ªõ ƒë·ªám (cache), c√≥ th·ªÉ n·∫°p d·ªØ li·ªáu l∆∞·ªõi quan h·ªá (relational grid). T∆∞∆°ng t√°c v·ªõi c√°c l·ªõp d·ªãch v·ª• qua d·ªØ li·ªáu POJO.
  Object Grid: V·ªã tr√≠ t·∫°m th·ªùi l∆∞u b·∫£n sao d·ªØ li·ªáu quan h·ªá (cache). M·ªçi truy v·∫•n t·ªõi CSDL tr∆∞·ªõc ti√™n t√°c ƒë·ªông v√†o object grid, ch·ªâ khi commit m·ªõi ghi v√†o CSDL ch√≠nh.
    üëâL∆∞u t·∫°m c√°c entity ƒëang ƒë∆∞·ª£c qu·∫£n l√Ω.
       Khi b·∫°n g·ªçi persist(), entity ch∆∞a ghi ngay xu·ªëng DB, m√† ƒë∆∞·ª£c l∆∞u trong Object Grid.
       Khi g·ªçi commit(), to√†n b·ªô thay ƒë·ªïi trong grid m·ªõi ƒë∆∞·ª£c flush (ghi xu·ªëng DB).
       Khi query, JPA s·∫Ω t√¨m trong Object Grid tr∆∞·ªõc, n·∫øu ch∆∞a c√≥ m·ªõi g·ª≠i SQL ƒë·∫øn DB.
  üëâ C∆° ch·∫ø n√†y gi√∫p gi·∫£m truy c·∫≠p DB tr·ª±c ti·∫øp, c·∫£i thi·ªán hi·ªáu nƒÉng v√† ƒë·ªìng b·ªô d·ªØ li·ªáu.
Phase 3: Relational Data Phase (T·∫ßng CSDL Quan h·ªá)
  Ch·ª©a d·ªØ li·ªáu quan h·ªá g·∫Øn v·ªõi th√†nh ph·∫ßn nghi·ªáp v·ª•.
  Ch·ªâ khi commit, d·ªØ li·ªáu m·ªõi ƒë∆∞·ª£c ghi th·ª±c s·ª± v√†o CSDL b·∫±ng SQL l·ªánh INSERT, UPDATE, DELETE. Tr∆∞·ªõc ƒë√≥, d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong cache (object grid). Vi·ªác l·∫•y d·ªØ li·ªáu c≈©ng t∆∞∆°ng t·ª±.
  ‚Üí C∆° ch·∫ø t∆∞∆°ng t√°c gi·ªØa ba giai ƒëo·∫°n tr√™n g·ªçi l√† Object Relational Mapping.
  Khi truy v·∫•n (find, query):
  JPA t√¨m trong Object Grid (cache).
  N·∫øu kh√¥ng c√≥ ‚Üí sinh SQL SELECT ‚Üí DB tr·∫£ k·∫øt qu·∫£ ‚Üí JPA Loader √°nh x·∫° th√†nh Entity ‚Üí l∆∞u l·∫°i trong Object Grid.

üîÑTo√†n b·ªô c∆° ch·∫ø: Object Relational Mapping (ORM)
  ·ª®ng d·ª•ng t·∫°o Object (POJO/Entity) trong code.
  DAO/Service g·ªçi JPA (EntityManager) ƒë·ªÉ l∆∞u/ƒë·ªçc object.
  JPA Layer ki·ªÉm tra Persistence Context (cache), n·∫øu ch∆∞a c√≥ th√¨ query DB.
  JPA Loader + Mapping d·ªãch object ‚Üî record (ORM).
  JPA Provider sinh SQL v√† th·ª±c thi tr√™n Relational DB.
  K·∫øt qu·∫£ (record) ƒë∆∞·ª£c map ng∆∞·ª£c l·∫°i th√†nh Object trong Java.
  N·∫øu c√≥ cache (Object Grid, Data Grid), d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u ƒë·ªÉ l·∫ßn sau truy c·∫≠p nhanh h∆°n.

V√≠ d·ª• v·ªÅ vi·ªác t√¨m ki·∫øm danh s√°ch b·∫£n ghi v·ªõi ƒëi·ªÅu ki·ªán v·ªõi sql thu·∫ßn

book_list = new List();
sql = "SELECT * FROM library WHERE author = 'Linus'";
data = query(sql);
while (row = data.next())
{
     book = new Book();
     book.setAuthor(row.get('author');
     book_list.add(book);
}

V·ªõi ORM, n√≥ s·∫Ω ƒë∆°n gi·∫£n nh∆∞ sau:

book_list = BookTable.query(author="Linus");

| Annotation         | M√¥ t·∫£                                                           |
| ------------------ | --------------------------------------------------------------- |
| @Entity            | ƒê√°nh d·∫•u class l√† entity (b·∫£ng).                                |
| @Table             | Ch·ªâ ƒë·ªãnh t√™n b·∫£ng.                                              |
| @Basic             | Ch·ªâ ƒë·ªãnh thu·ªôc t√≠nh kh√¥ng c√≥ r√†ng bu·ªôc ƒë·∫∑c bi·ªát.                |
| @Embedded          | Ch·ªâ ƒë·ªãnh thu·ªôc t√≠nh l√† instance c·ªßa l·ªõp embeddable.             |
| @Id                | ƒê√°nh d·∫•u thu·ªôc t√≠nh l√† kh√≥a ch√≠nh.                              |
| @GeneratedValue    | Ch·ªâ ƒë·ªãnh c√°ch sinh gi√° tr·ªã cho kh√≥a ch√≠nh.                      |
| @Transient         | ƒê√°nh d·∫•u thu·ªôc t√≠nh kh√¥ng ƒë∆∞·ª£c l∆∞u trong CSDL.                  |
| @Column            | Ch·ªâ ƒë·ªãnh c·ªôt ·ª©ng v·ªõi thu·ªôc t√≠nh.                                |
| @SequenceGenerator | ƒê·ªãnh nghƒ©a sequence ƒë·ªÉ sinh gi√° tr·ªã cho @GeneratedValue.        |
| @TableGenerator    | ƒê·ªãnh nghƒ©a b·∫£ng d√πng ƒë·ªÉ sinh gi√° tr·ªã cho @GeneratedValue.       |
| @AccessType        | Ch·ªâ ƒë·ªãnh c√°ch truy c·∫≠p: FIELD hay PROPERTY.                     |
| @JoinColumn        | Ch·ªâ ƒë·ªãnh c·ªôt li√™n k·∫øt trong quan h·ªá (many-to-one, one-to-many). |
| @UniqueConstraint  | ƒê·∫∑t r√†ng bu·ªôc unique.                                           |
| @ColumnResult      | Tham chi·∫øu t√™n c·ªôt trong c√¢u SQL SELECT.                        |
| @ManyToMany        | ƒê·ªãnh nghƒ©a quan h·ªá nhi·ªÅu-nhi·ªÅu.                                 |
| @ManyToOne         | ƒê·ªãnh nghƒ©a quan h·ªá nhi·ªÅu-m·ªôt.                                   |
| @OneToMany         | ƒê·ªãnh nghƒ©a quan h·ªá m·ªôt-nhi·ªÅu.                                   |
| @OneToOne          | ƒê·ªãnh nghƒ©a quan h·ªá m·ªôt-m·ªôt.                                     |
| @NamedQueries      | Khai b√°o danh s√°ch named query.                                 |
| @NamedQuery        | Khai b√°o m·ªôt query tƒ©nh theo t√™n.                               |
